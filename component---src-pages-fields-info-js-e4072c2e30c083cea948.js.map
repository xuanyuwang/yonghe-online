{"version":3,"sources":["webpack:///./src/components/fieldsInfo/fields-info-body/fields-info-body.js","webpack:///./src/pages/fields-info.js","webpack:///./src/components/fieldsInfo/fieldsInfoLayout.js","webpack:///./src/components/fieldsInfo/fields-info-top/fields-info-top.js"],"names":["STYLES","FieldInfoCard","infoBlockData","style","imgURL","index","styleName","card","className","info_title","info_date","source","info_content","escapeHtml","image","src","cardContent","Fragment","key","data","useStaticQuery","allInfoBlocks","allPrismicFieldinfoblock","edges","prismicFieldinfopage","background_01","background_02","infoBlocks","field_info_group","map","item","field_info_block","id","filter","block","node","prismicId","lastInfoCard","length","lastInfoBlock","pop","url","styleMap","infoCards","infoBlock","decorationImg","pageData","brannerLeftURL","banner_left","pageTitle","page_title","pageSubtitle","page_subtitle","pageTitleEnglish","page_title_english","props","leftSide","rightSide"],"mappings":"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","file":"component---src-pages-fields-info-js-e4072c2e30c083cea948.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport {useStaticQuery, graphql} from 'gatsby';\nimport ReactMarkdown from 'react-markdown/with-html';\n\nimport './fields-info-body.scss';\n\nconst STYLES = {\n\tDEFAULT: 0,\n\tALTERNATE: 1,\n\tSPAN: 2\n};\n\nconst FieldInfoCard = (infoBlockData, style, imgURL, index) => {\n\tconst styleName = 'style-' + style;\n\tconst card = <div className='info-card'>\n\t\t<div className='info-title'>{infoBlockData.info_title}</div>\n\t\t<div className='info-date'>{infoBlockData.info_date}</div>\n\t\t<div className='info-content'><ReactMarkdown source={infoBlockData.info_content} escapeHtml={false}></ReactMarkdown></div>\n\t</div>;\n\tconst image = <div className='info-card-decoration'>\n\t\t<img src={imgURL}/>\n\t</div>;\n\tlet cardContent;\n\tif(style === STYLES.DEFAULT){\n\t\tcardContent = <React.Fragment>\n\t\t\t{card}\n\t\t\t{image}\n\t\t</React.Fragment>;\n\t}else if(style === STYLES.ALTERNATE){\n\t\tcardContent = <React.Fragment>\n\t\t\t{image}\n\t\t\t{card}\n\t\t</React.Fragment>;\n\t}else if(style === STYLES.SPAN){\n\t\tcardContent = <React.Fragment>\n\t\t\t{image}\n\t\t\t<div className='info-card' >\n\t\t\t\t<div className='card-title-section'>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className='info-title'>{infoBlockData.info_title}</div>\n\t\t\t\t\t\t<div className='info-date'>{infoBlockData.info_date}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='left-quote'>â€œ</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='info-content'><ReactMarkdown source={infoBlockData.info_content} escapeHtml={false}></ReactMarkdown></div>\n\t\t\t</div>\n\t\t</React.Fragment>;\n\t}\n\treturn <div className={`field-info-card ${styleName}`} key={index}>\n\t\t<div className='card-inner-container'>\n\t\t\t{cardContent}\n\t\t</div>\n\t</div>;\n};\nconst FieldInfoBody = () => {\n\tconst data = useStaticQuery(graphql`\n    {\n      prismicFieldinfopage {\n        data {\n          field_info_group {\n            field_info_block {\n              id\n            }\n          }\n          background_01 {\n            url\n          }\n          background_02 {\n            url\n          }\n        }\n      }\n      allPrismicFieldinfoblock(sort: {order: DESC, fields: data___info_date}) {\n        edges {\n          node {\n            prismicId\n            data {\n              info_content\n              info_date\n              info_title\n            }\n          }\n        }\n      }\n    }`);\n\tconst allInfoBlocks = data.allPrismicFieldinfoblock.edges;\n\tconst prismicFieldinfopage = data.prismicFieldinfopage;\n\tconst background_01 = prismicFieldinfopage.data.background_01;\n\tconst background_02 = prismicFieldinfopage.data.background_02;\n\tconst neededInfoBlockIDs = prismicFieldinfopage.data.field_info_group.map((item) => { return item.field_info_block.id; });\n\n\tconst infoBlocks = neededInfoBlockIDs.map((id) => {\n\t\treturn allInfoBlocks.filter((block) => {\n\t\t\treturn block.node.prismicId === id;\n\t\t})[0].node.data;\n\t});\n\tlet lastInfoCard = null;\n\tif (infoBlocks.length % 2 === 1){\n\t\tconst lastInfoBlock = infoBlocks.pop();\n\t\tlastInfoCard = FieldInfoCard(lastInfoBlock, STYLES.SPAN, background_01.url);\n\t}\n\n\tconst styleMap = [STYLES.DEFAULT, STYLES.ALTERNATE, STYLES.ALTERNATE, STYLES.DEFAULT];\n\tconst infoCards = infoBlocks.map((infoBlock, index) => {\n\t\tconst style = styleMap[index % styleMap.length];\n\t\tconst decorationImg = style === 0 ? background_02.url : background_01.url;\n\t\treturn FieldInfoCard(infoBlock, style, decorationImg, index);\n\t});\n\n\treturn <Container className='field-info-body-container'>\n\t\t<div className='field-info-columns'>\n\t\t\t{infoCards}\n\t\t\t{lastInfoCard}\n\t\t</div>\n\t</Container>;\n};\n\nexport default FieldInfoBody;","import React from 'react';\nimport IndustryInfoLayout from '../components/fieldsInfo/fieldsInfoLayout';\n\nconst FieldsInfoPage = () => {\n\treturn <IndustryInfoLayout/>;\n};\n\n\nexport default FieldsInfoPage;","import React from 'react';\nimport FieldsInfoBody from './fields-info-body/fields-info-body';\nimport FieldsInfoTop from './fields-info-top/fields-info-top';\nimport Footer from '../Footer/footer';\nimport NavBar from '../Navbar/navbar';\n\nconst FieldsInfoLayout = () => {\n\treturn <React.Fragment>\n\t\t<NavBar></NavBar>\n\t\t<FieldsInfoTop/>\n\t\t<FieldsInfoBody/>\n\t\t<Footer/>\n\t</React.Fragment>;\n};\nexport default FieldsInfoLayout;","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport './fields-info-top.scss';\n\nconst leftSide = (props) => {\n\tconst { brannerLeftURL } = props;\n\treturn <div className='banner-image-container' >\n\t\t<img src={brannerLeftURL}></img>\n\t</div>;\n};\nconst rightSide = (props) => {\n\tconst { pageTitle, pageSubtitle, pageTitleEnglish } = props;\n\treturn <div className='banner-text-container'>\n\t\t<div className='banner-text-left'>\t\n\t\t\t<div className='banner-title' >\n\t\t\t\t{pageTitle}\n\t\t\t</div>\t\n\t\t\t<div className='banner-subtitle'>\n\t\t\t\t{pageSubtitle}\n\t\t\t</div>\n\t\t</div>\n\t\t<div className='banner-title-english'>\n\t\t\t{pageTitleEnglish}\n\t\t</div>\n\t</div>;\n};\nconst FieldsInfoTop = () => {\n\tconst data = useStaticQuery(graphql`\n    {\n      prismicFieldinfopage {\n        data {\n          banner_left {\n            url\n          }\n          page_title\n          page_subtitle\n          page_title_english\n        }\n      }\n\t}`);\n\tconst pageData = data.prismicFieldinfopage.data;\n\tconst brannerLeftURL = pageData.banner_left.url;\n\tconst pageTitle = pageData.page_title;\n\tconst pageSubtitle = pageData.page_subtitle;\n\tconst pageTitleEnglish = pageData.page_title_english;\n\treturn <div className='fields-info-top'>\n\t\t<div className='left-container'>\n\t\t\t{leftSide({ brannerLeftURL })}\n\t\t</div>\n\t\t<div className='right-container'>\n\t\t\t{rightSide({\n\t\t\t\tpageTitle,\n\t\t\t\tpageSubtitle,\n\t\t\t\tpageTitleEnglish\n\t\t\t})}\n\t\t</div>\n\t</div>;\n};\n\nexport default FieldsInfoTop;"],"sourceRoot":""}